---
title: "Solution: ggplot2"
author: "Kevin Rue-Albrecht"
date: "14/10/2024"
editor: 
  markdown: 
    wrap: sentence
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(patchwork)
library(gridExtra)
```

# Exercise

Use `library(ggplot2)` to load the package.

```{r}
library(ggplot2)
```

## Specify the dataset.

What does `ggplot(diamonds)` do?

```{r}
ggplot(diamonds)
```

> Answer:

## Add the aesthetics.

What does `ggplot(diamonds, aes(x = carat, y = price))` do?

```{r}
ggplot(diamonds, aes(x = carat, y = price))
```

> Answer:

## Add geometric objects

-   Add data points showing `carat` on the x-axis and `price` on the y-axis.

```{r}
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
  
```

-   Color data points by `cut`. (Copy-paste and extend the code chunk above.)

```{r}
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + geom_point()
  
```

-   Add a smoothed mean trend line. (Copy-paste and extend the code chunk above.)

```{r}

ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + geom_point() + geom_smooth()

```

-   Assign that last plot to an object called `obds_diamonds`.

```{r}

obds_diamonds <- ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + 
  geom_point() + 
  geom_smooth()

```

# Exercise

Predict the difference between these two plots

### Plot 1

```{r}
#| include: true
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) +
  geom_point() +
  geom_smooth()
```

### Plot 2

```{r}
#| include: true
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(aes(colour = cut)) +
  geom_smooth()
```

> Answer:

# Exercise

## Trend lines

Using the `ChickWeight` data set:

-   Create a scatter plot of weight (y-axis) over time (x-axis).

```{r}
ggplot(ChickWeight, aes(x=Time, y=weight)) +
  geom_point()

```

-   Color by diet. (Copy-paste and extend the code chunk above.)

```{r}
ggplot(ChickWeight, aes(x=Time, y=weight, colour = Diet)) +
  geom_point()

```

-   Add a linear mean trend line for each diet. (Copy-paste and extend the code chunk above.)

```{r}
ggplot(ChickWeight, aes(x=Time, y=weight, colour = Diet)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE)

```

At this point you should be able to visually identify the diet that leads to the highest mean increase in weight.

> Answer:3

-   Facet a ribbon of sub-plots, one per diet. (Copy-paste and extend the code chunk above.)

```{r}

ggplot(ChickWeight, aes(x=Time, y=weight, colour = Diet)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE)+
  facet_wrap(~Diet, nrow=1)


```

-   Assign that last plot to an object called `obds_chickweight`.

```{r}
obds_chickweight <- ggplot(ChickWeight, aes(x=Time, y=weight, colour = Diet)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE)+
  facet_wrap(~Diet, nrow=1)



```

# Exercise

## Bar plot

-   Load the `ggplot2::msleep` data set.

```{r}
msleep <- ggplot2::msleep

```

-   Draw a bar plot of number of observations (i.e., rows) for each taxonomic order (i.e, one plot and one bar per taxonomic order).

```{r}
ggplot(msleep, aes(x=order)) + geom_bar()


```

-   Change the angle and font size of the text for the x-axis ticks (not the axis titles). Justify the text of those x-axis ticks as right-aligned. (Copy-paste and extend the code chunk above.)

```{r}

ggplot(msleep, aes(x=order)) + geom_bar()+
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5))



```

-   Change the value and font size of the title for both x and y axes. (Copy-paste and extend the code chunk above.)

```{r}

ggplot(msleep, aes(x=order)) + geom_bar()+
  labs(x = "Order", y="Count") +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"))





```

-   Fill each bar with colors, proportionally to the count of each genus. (Copy-paste and extend the code chunk above.)

```{r}


ggplot(msleep, aes(x=order, fill = genus)) + geom_bar()+
  labs(x = "Order", y="Count") +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"))

```

From this point onwards, you may need to iteratively resize the text of the ticks and axes for readability.

-   Reduce the legend key size. (Recommendation: use `unit(2, "mm")`). (Copy-paste and extend the code chunk above.)

```{r}
#this is the wrong code but looks nice!
ggplot(msleep, aes(x=order, fill =..count..)) + geom_bar()+
  scale_fill_gradient(low="lightblue", high = "darkblue")+
  labs(x = "Order", y="Count") +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"),
        legend.key.size = unit(2, "mm"),
        legend.text = element_text(size = 6))

#real code
ggplot(msleep, aes(x=order, fill = genus)) + geom_bar()+
  labs(x = "Order", y="Count") +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"), 
        legend.key.size = unit(2, "mm"),
        legend.text = element_text(size = 10))




```

-   Force the legend to be display in 3 columns. (Recommendation: use `guide_legend(...)`). (Copy-paste and extend the code chunk above.)

```{r}


ggplot(msleep, aes(x=order, fill = genus)) + geom_bar()+
  labs(x = "Order", y="Count") +
  guides(fill = guide_legend(ncol = 3)) +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"), 
        legend.key.size = unit(2, "mm"),
        legend.text = element_text(size = 10))

```

-   Add a contour of thin black lines to the bars.

```{r}


ggplot(msleep, aes(x=order, fill = genus)) + geom_bar(color="black", linewidth=0.2)+
  labs(x = "Order", y="Count") +
  guides(fill = guide_legend(ncol = 3)) +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"), 
        legend.key.size = unit(2, "mm"),
        legend.text = element_text(size = 10))

```

-   Assign that last plot to an object called `obds_msleep`.

```{r}

obds_msleep <- ggplot(msleep, aes(x=order, fill = genus)) + geom_bar(color="black", linewidth=0.2)+
  labs(x = "Order", y="Count") +
  guides(fill = guide_legend(ncol = 3)) +
  theme(axis.text.x = element_text(angle = 90, size = 10, hjust = 1, vjust = 0.5),  
        axis.title =element_text(size = 14, face = "bold"), 
        legend.key.size = unit(2, "mm"),
        legend.text = element_text(size = 10))
```

# Exercise

## Plotting grid

-   Collate the plots that we assigend to objects through the day, as a single plot.

    -   Plots: `obds_diamonds`, `obds_chickweight`, `obds_msleep`.

    -   Methods: `cowplot::plot_grid()`, `patchwork`, `gridExtra::grid.arrange()`.

Using `cowplot`.

```{r}
#| fig-width: 12
#| fig-height: 12
library(cowplot)
cowplot::plot_grid(obds_msleep, obds_diamonds, labels = c("mSleep", "Diamonds"), ncol = 2, nrow = 1)
first_row <- cowplot::plot_grid(obds_msleep, obds_diamonds, labels = c("mSleep", "Diamonds"), ncol = 2, nrow = 1)
  
cowplot::plot_grid(obds_chickweight, labels = "Chickweight", ncol =1, nrow=1)
second_row <- cowplot::plot_grid(obds_chickweight, labels = "Chickweight", ncol =1, nrow=1)

  
cowplot::plot_grid(first_row, second_row, ncol=1, nrow = 2)
super_plot <- cowplot::plot_grid(first_row, second_row, ncol=1, nrow = 2)
  
super_plot
```

Using `patchwork`.

```{r}
#| fig-width: 20
#| fig-height: 20
library(patchwork)
patchwork_obds <- (obds_msleep + obds_diamonds)/obds_chickweight+ plot_annotation(tag_levels = 'A')
ggsave("bigsize.pdf",
      patchwork_obds,
      width = 20, height = 20)
```

Using `gridExtra`.

```{r}
#| fig-width: 12
#| fig-height: 12
library(gridExtra)

lay = rbind(c(1,2),
            c(3.3))
grid.arrange(arrangeGrob(obds_msleep), arrangeGrob(obds_diamonds), arrangeGrob(obds_chickweight), layout_matrix = lay)

```

-   Export the new plot in a PDF file, and open it in a PDF viewer (e.g. Adobe Acrobat Reader DC).

You will likely need a few attempts to fine-tune the width and height of the output file.

```{r}
ggsave("patchwork.pdf",
      patchwork_obds,
      width = 15, height = 15)
```

# Exercise

## Pair programming

-   Explore the data set `ggplot2::mpg` and generate the most informative plot that you can!

```{r}




```
