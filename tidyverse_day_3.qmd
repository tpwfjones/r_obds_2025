---
title: 'Template: Integrated exercise using the <i class="fab fa-r-project"></i> tidyverse'
author: "Kevin Rue-Albrecht"
date: "2023-06-09"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(readxl)
```

## Exercise

### Part 1

We provide you with an Excel file that contains gene expression data for the nine most highly variable genes in a pancreas cancer gene expression dataset (<https://portal.gdc.cancer.gov/projects/TCGA-PAAD>), as well as metadata for the individual samples and genes.

- Import the gene expression matrix from the Excel file into the R session as a `tibble`.
  Assign it to an object named `exprs_assay`.

```{r}
excel_sheets("/project/clme2295/r-week-2/tidyverse_day_3/EH2011.xlsx")
exprs_assay <- read_excel("/project/clme2295/r-week-2/tidyverse_day_3/EH2011.xlsx",sheet = "exprs")
exprs_assay
```

- Reshape the gene expression matrix in a tidy format.
  Assign it to a new object `exprs_assay_long`.

```{r}
exprs_assay_long <- exprs_assay %>%
  pivot_longer(where(is.numeric), names_to = "sample_ID")
      
exprs_assay_long
```

- Draw a histogram of gene expression levels for each gene in a separate facet.

```{r}
#| fig-width: 10
#| fig-height: 10
ggplot(exprs_assay_long, aes(x=value, fill=..count.., colour = gene))+
  scale_fill_gradient(low = "white", high = "black")+
         geom_histogram(bins = 30, size=1)+
  facet_wrap(~gene)+
  labs(x = "Gene expression", y="Number of Samples",title = "Gene Expression in Pancreas Cancer")+
  theme(text = element_text(hjust = 0.5), axis.text.x = element_text(size = 10),  
        axis.title =element_text(size = 14, face = "bold"), title = element_text(size = 16, face = "bold"))



```

## Exercise

### Part 2

- Import the sample metadata from the Excel file into the R session as a `tibble`.
  Assign it to an object named `sample_info`.

```{r}
excel_sheets("/project/clme2295/r-week-2/tidyverse_day_3/EH2011.xlsx")
sample_info <- read_excel("/project/clme2295/r-week-2/tidyverse_day_3/EH2011.xlsx",sheet = "sample_info")
sample_info
```

> Metadata key:
> 
> [NIH AJCC staging system](https://www.cancer.gov/publications/dictionaries/ca> ncer-terms/def/ajcc-staging-system)
> 
> - grade: how abnormal the cancer cells and tissue look under a microscope
> - T: size of the tumor and any spread of cancer into nearby tissue
> - N: spread of cancer to nearby lymph nodes
> - M: metastasis (spread of cancer to other parts of the body)

- Convert the four columns above to the factor type.

```{r}
sample_info <- sample_info %>%
mutate(grade=as.factor(grade),
    T=as.factor(T), 
         N=as.factor(N),
         M=as.factor(M))


sample_info
```

- Combine sample information with gene expression data.
  Assign the output to `exprs_sampleinfo`.

```{r}
exprs_sampleinfo <- sample_info %>%
  full_join(exprs_assay_long, by = join_by(unique_patient_ID==sample_ID)) %>% 
  select(-sample_name)

exprs_sampleinfo
```

## Exercise

### Part 3

- Identify the gene with the largest absolute difference in expression between male and female patients.

```{r}
exprs_sampleinfo %>% 
mutate(sex=as_factor(sex)) %>% #this is not necessary
select(unique_patient_ID, sex, gene, value) %>% 
  group_by(gene,sex) %>%
    summarise(Expression.mean = mean(value), .groups = "drop") %>% 
  pivot_wider(names_from = sex, values_from=Expression.mean) %>% #instead of the previous steps values_fn = mean
  rename(M.expression = "M", F.expression = "F") %>% 
    mutate(difference.sex = M.expression-F.expression) %>%
  arrange(-abs(difference.sex))

    ```

- Visualise the expression of that gene across tumour grades.
  Facet by `sex`.
  Color by `T` score.

```{r}
table_for_ggplot <- exprs_sampleinfo %>% 
mutate(sex=as_factor(sex)) %>% 
filter(gene=="XIST")

table_for_ggplot
```

```{r}
ggplot(table_for_ggplot, aes(x=grade, y=value, fill=T))+
         geom_boxplot()+
  facet_wrap(~sex, labeller = as_labeller(c(M="Male", F="Female")))+
 labs(x = "Tumour Grade", y="Number of Samples",title = "Gene Expression of XIST in Pancreas Cancer sperated by Sex", fill="T Grade")+
  theme(text = element_text(hjust = 0.5), axis.text.x = element_text(size = 10),  
        axis.title =element_text(size = 14, face = "bold"), title = element_text(size = 16, face = "bold"))

```

- Draw a heat map of all nine genes.
  Remove labels as well as ticks for the x-axis.
  Remove the panel grid and background.

```{r}
#| fig-width: 10
#| fig-height: 5
ggplot(exprs_sampleinfo, aes(x=unique_patient_ID, y=gene, fill=value)) +
  geom_tile()+
labs(x = "Samples", y="Gene",title = "Heatmap of Gene Expression in Pancreas Cancer ", fill="Expression")+
  scale_fill_gradient(low="yellow", high = "red")+
  theme(text = element_text(hjust = 0.5), 
        axis.text.x = element_blank(),  
        axis.title =element_text(size = 14, 
                                 face = "bold"), 
        title = element_text(size = 16, face = "bold"), 
        axis.ticks.x = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank())

```

- Repeat the heat map, grouping samples by sex.

```{r}
#| fig-width: 10
#| fig-height: 5
my_theme <- theme(text = element_text(hjust = 0.5), 
        axis.text.x = element_blank(),  
        axis.title =element_text(size = 14, 
                                 face = "bold", hjust = 0.5), 
        plot.title = element_text(size = 12, face = "bold", hjust = 0.5), 
        axis.ticks.x = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.background = element_blank())

# Copy the code chunk above and tweak the aes(...) contents.
ggplot(exprs_sampleinfo, aes(x=unique_patient_ID, y=gene, fill=value)) +
  geom_tile(na.rm=TRUE)+
  facet_wrap(~sex, scales="free_x",labeller = as_labeller(c(M="Male", F="Female")))+
scale_fill_gradient(low="yellow",  high = "red")+
  labs(x = "Samples", y="Gene",title = "Heatmap of Gene Expression in Pancreas Cancer Seperated by Sex ", fill="Expression")+
  my_theme


```
